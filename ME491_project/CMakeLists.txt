cmake_minimum_required(VERSION 3.10)
project(_ME491_2023_project)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/ME491_2023_project/env/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/ME491_2023_project/env/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/ME491_2023_project/env/bin)

######################
### help functions ###
######################
MACRO(SUBDIRLIST result curdir)
    FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
    SET(dirlist "")
    FOREACH(child ${children})
        IF(IS_DIRECTORY ${curdir}/${child})
            LIST(APPEND dirlist ${child})
        ENDIF()
    ENDFOREACH()
    SET(${result} ${dirlist})
ENDMACRO()

####################
### dependencies ###
####################
set(Dependencies)

add_subdirectory(thirdParty/pybind11 pybind11)
set(Eigen3_DIR ${CMAKE_CURRENT_SOURCE_DIR}/thirdParty/share/eigen3/cmake)
find_package(Eigen3 3.4.0 PATHS ${Eigen3_DIR})
find_package(OpenMP REQUIRED)
message("-- Eigen version: ${EIGEN3_VERSION_STRING}")

if (UNIX AND NOT APPLE AND NOT ANDROID AND NOT WEBGL AND NOT WIN32)
    set(RAISIM_OS linux)
    list(APPEND CMAKE_PREFIX_PATH ../raisimLib/raisim/${RAISIM_OS})
elseif(APPLE)
    set(RAISIM_OS mac)
    list(APPEND CMAKE_PREFIX_PATH ../raisimLib/raisim/${RAISIM_OS})
    list(APPEND Dependencies OpenMP::OpenMP_CXX)
elseif(WIN32)
    set(RAISIM_OS win32)
    list(APPEND CMAKE_PREFIX_PATH ../raisimLib/raisim/${RAISIM_OS}/mt_debug)
    list(APPEND CMAKE_PREFIX_PATH ../thirdParty)
    list(APPEND Dependencies Ws2_32)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/ME491_2023_project/env/bin)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/ME491_2023_project/env/bin)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/ME491_2023_project/env/bin)
endif()

find_package(raisim CONFIG REQUIRED)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")

#######################
### src and linking ###
#######################
SUBDIRLIST(SUBDIRS ${CMAKE_CURRENT_SOURCE_DIR}/ME491_2023_project/env/envs)
set(RAISIMGYM_ENV_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ME491_2023_project/env/envs)


MACRO(SUBMISSIONS result curdir)
    FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
    SET(dirlist "")
    FOREACH(child ${children})
        STRING(FIND ${child} "AnymalController_" found)
        IF(NOT ${found} EQUAL -1)
            LIST(APPEND dirlist ${child})
        ENDIF()
    ENDFOREACH()
    SET(${result} ${dirlist})
ENDMACRO()

SUBMISSIONS(SUBMISSIONS ${RAISIMGYM_ENV_DIR}/rsg_anymal)


FOREACH(subdir ${SUBDIRS})
    pybind11_add_module(${subdir} ME491_2023_project/env/raisim_gym.cpp ME491_2023_project/env/Yaml.cpp)
    target_link_libraries(${subdir} PRIVATE raisim::raisim ${Dependencies})
    target_include_directories(${subdir} PUBLIC ${EIGEN3_INCLUDE_DIRS} ${RAISIMGYM_ENV_DIR}/${subdir})
    target_compile_options(${subdir} PRIVATE -mtune=native -fPIC -O3 -g -mno-avx2)
    target_compile_definitions(${subdir} PRIVATE "-DRAISIMGYM_TORCH_ENV_NAME=${subdir}")
    target_compile_definitions(${subdir} PRIVATE EIGEN_DONT_PARALLELIZE)
    target_compile_definitions(${subdir} PRIVATE "$<$<CONFIG:RELEASE>:EIGEN_NO_DEBUG>")

    FOREACH(submission ${SUBMISSIONS})
        STRING(REGEX REPLACE "AnymalController_(.*).hpp" "\\1" STUDENT_ID ${submission})
        STRING(REGEX MATCH "^[0-9]+$" is_number ${STUDENT_ID})
        IF(is_number)
            target_compile_definitions(${subdir} PUBLIC TRAINING_HEADER_FILE_TO_INCLUDE=\"${submission}\")
            get_filename_component(OUTPUT_FILE_WE ${submission} NAME_WE)
            target_compile_definitions(${subdir} PUBLIC TRAINING_CONTROLLER=${OUTPUT_FILE_WE})
            target_compile_definitions(${subdir} PUBLIC PLAYER_NAME=\"${STUDENT_ID}\")
            message("[RAISIM_GYM_TRAINING] controller file name: " ${submission})
        ENDIF()
    ENDFOREACH()

    if (CMAKE_BUILD_TYPE STREQUAL "DEBUG" OR CMAKE_BUILD_TYPE STREQUAL "Debug")
        message("[RAISIM_GYM DEBUG] BUILDING THE DEBUG APP for ${subdir}")
        add_executable(${subdir}_debug_app ME491_2023_project/env/debug_app.cpp ME491_2023_project/env/Yaml.cpp)
        target_link_libraries(${subdir}_debug_app PRIVATE raisim::raisim)
        target_include_directories(${subdir}_debug_app PUBLIC ME491_2023_project/env/envs/${subdir} ${EIGEN3_INCLUDE_DIRS})
        if(WIN32)
            target_link_libraries(${subdir}_debug_app PRIVATE Ws2_32)
        else()
            target_compile_options(${subdir}_debug_app PRIVATE -mtune=native -fPIC -g -O0 -mno-avx2)
        endif()
        FOREACH(submission ${SUBMISSIONS})
        STRING(REGEX REPLACE "AnymalController_(.*).hpp" "\\1" STUDENT_ID ${submission})
        STRING(REGEX MATCH "^[0-9]+$" is_number ${STUDENT_ID})
        IF(is_number)
            target_compile_definitions(${subdir}_debug_app PUBLIC TRAINING_HEADER_FILE_TO_INCLUDE=\"${submission}\")
            get_filename_component(OUTPUT_FILE_WE ${submission} NAME_WE)
            target_compile_definitions(${subdir}_debug_app PUBLIC TRAINING_CONTROLLER=${OUTPUT_FILE_WE})
            target_compile_definitions(${subdir}_debug_app PUBLIC PLAYER_NAME=\"${STUDENT_ID}\")
        ENDIF()
    ENDFOREACH()
    endif()
ENDFOREACH()

FOREACH(submission1 ${SUBMISSIONS})
    FOREACH(submission2 ${SUBMISSIONS})
        IF(NOT "${submission1}" STREQUAL "${submission2}" AND "${submission1}" STRLESS "${submission2}")

            STRING(REGEX REPLACE "AnymalController_(.*).hpp" "\\1" parsed_name1 ${submission1})
            STRING(REGEX REPLACE "AnymalController_(.*).hpp" "\\1" parsed_name2 ${submission2})

            SET(build_name "SI${parsed_name1}vsSI${parsed_name2}")
            pybind11_add_module(${build_name} ME491_2023_project/env/raisim_gym_for_test.cpp ME491_2023_project/env/Yaml.cpp)
            target_link_libraries(${build_name} PRIVATE raisim::raisim ${Dependencies})
            target_include_directories(${build_name} PUBLIC ${EIGEN3_INCLUDE_DIRS} ${RAISIMGYM_ENV_DIR}/rsg_anymal)
            target_compile_options(${build_name} PRIVATE -mtune=native -fPIC -O3 -g -mno-avx2)
            target_compile_definitions(${build_name} PRIVATE "-DRAISIMGYM_TORCH_ENV_NAME=${build_name}")
            target_compile_definitions(${build_name} PRIVATE EIGEN_DONT_PARALLELIZE)
            target_compile_definitions(${build_name} PRIVATE "$<$<CONFIG:RELEASE>:EIGEN_NO_DEBUG>")
            target_compile_definitions(${build_name} PUBLIC PLAYER1_HEADER_FILE_TO_INCLUDE=\"${submission1}\")
            target_compile_definitions(${build_name} PUBLIC PLAYER2_HEADER_FILE_TO_INCLUDE=\"${submission2}\")

            get_filename_component(OUTPUT_FILE_WE_1 ${submission1} NAME_WE)
            get_filename_component(OUTPUT_FILE_WE_2 ${submission2} NAME_WE)
            target_compile_definitions(${build_name} PUBLIC PLAYER1_CONTROLLER=${OUTPUT_FILE_WE_1})
            target_compile_definitions(${build_name} PUBLIC PLAYER2_CONTROLLER=${OUTPUT_FILE_WE_2})

            target_compile_definitions(${build_name} PUBLIC PLAYER1_NAME=\"${parsed_name1}\")
            target_compile_definitions(${build_name} PUBLIC PLAYER2_NAME=\"${parsed_name2}\")
            message("[${build_name}] BUILDING THE test environment for tester")
        ENDIF()
    ENDFOREACH()
ENDFOREACH()